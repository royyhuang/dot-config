# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #
#

# focus window
lshift + ctrl - h : yabai -m window --focus west  || $(yabai -m display --focus west; yabai -m window --focus west) 
lshift + ctrl - j : yabai -m window --focus south || $(yabai -m display --focus south; yabai -m window --focus south) 
lshift + ctrl - k : yabai -m window --focus north || $(yabai -m display --focus north; yabai -m window --focus north) 
lshift + ctrl - l : yabai -m window --focus east  || $(yabai -m display --focus east; yabai -m window --focus east)
rshift + ctrl - 0x21 : yabai -m window --focus stack.prev || yabai -m window --focus stack.last
rshift + ctrl - 0x1E : yabai -m window --focus stack.next || yabai -m window --focus stack.first

# fast focus desktop
rshift + ctrl - 1 : yabai -m space --focus 1
rshift + ctrl - 2 : yabai -m space --focus 2
rshift + ctrl - 3 : yabai -m space --focus 3
rshift + ctrl - 4 : yabai -m space --focus 4
rshift + ctrl - 5 : yabai -m space --focus 5
rshift + ctrl - 6 : yabai -m space --focus 6
rshift + ctrl - 7 : yabai -m space --focus 7
rshift + ctrl - 8 : yabai -m space --focus 8
rshift + ctrl - 9 : yabai -m space --focus 9
rshift + ctrl - t : yabai -m space --focus 1
rshift + ctrl - e : yabai -m space --focus 3
rshift + ctrl - c : yabai -m space --focus 2
rshift + ctrl - w : yabai -m space --focus 4
rshift + ctrl - m : yabai -m space --focus 5
rshift + ctrl - p : yabai -m space --focus recent

rshift + cmd - x : yabai -m space --destroy
rshift + cmd - c : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-create-sp
rshift + cmd - 1 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 1 
rshift + cmd - 2 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 2 
rshift + cmd - 3 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 3 
rshift + cmd - 4 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 4 
rshift + cmd - 5 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 5 
rshift + cmd - 6 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 6 
rshift + cmd - 7 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 7 
rshift + cmd - 8 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 8 
rshift + cmd - 9 : /opt/homebrew/bin/skhd -k "espace"; bash ~/.local/bin/yabai-mv-win-space 9 

# swap managed window
lshift + cmd - h : yabai -m window --swap west  || $(yabai -m window --display west; yabai -m display --focus west)
lshift + cmd - j : yabai -m window --swap south || $(yabai -m window --display south; yabai -m display --focus south)
lshift + cmd - k : yabai -m window --swap north || $(yabai -m window --display north; yabai -m display --focus north)
lshift + cmd - l : yabai -m window --swap east  || $(yabai -m window --display east; yabai -m display --focus east)

# balance size of windows
lshift + cmd - 0 : yabai -m space --balance

# toggle zoom fullscreen
lshift + cmd - f : yabai -m window --toggle zoom-fullscreen

# make floating window fill screen
shift + alt - up : yabai -m window --grid 1:1:0:0:1:1

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# float / unfloat window and center on screen
shift + ctrl - t : yabai -m window --toggle float --grid 4:4:1:1:2:2
# move floating window
lshift + ctrl - a : yabai -m window --move rel:-30:0
lshift + ctrl - s : yabai -m window --move rel:0:30
lshift + ctrl - d : yabai -m window --move rel:30:0
lshift + ctrl - w : yabai -m window --move rel:0:-30

# increase window size
ctrl + alt - left : yabai -m window --resize left:-20:0
ctrl + alt - down : yabai -m window --resize bottom:0:20
ctrl + alt - up : yabai -m window --resize top:0:-20
ctrl + alt - right : yabai -m window --resize right:20:0

# decrease window size
ctrl + cmd - left : yabai -m window --resize left:20:0
ctrl + cmd - down : yabai -m window --resize bottom:0:-20
ctrl + cmd - up : yabai -m window --resize top:0:20
ctrl + cmd - right : yabai -m window --resize right:-20:0

# set insertion point in focused container
cmd + shift - left : yabai -m window --insert west

# toggle sticky(+float), topmost, picture-in-picture
ctrl - p : yabai -m window --toggle sticky --toggle topmost --toggle pip
